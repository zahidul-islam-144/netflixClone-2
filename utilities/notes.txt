// import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { allURI } from "../assets/apiKeys";
import TopHeader from "../components/TopHeader";
import Layout from "../components/Layout";
import styles from "../styles/Home.module.css";
import { Movie, MoviePropsType, ObjType,  UriType } from "../utilities/types";
import Banner from "./banner";
import Movies from "./movies/movies";
import { useFetchMovies } from "../hooks/useFetchMovies";
import useStorage from "../hooks/useMovies";



const Home = ({
  netflixOriginals,
  topRated,
  trending,
  adeventure,
  fantasy,
  animation,
  drama,
  action,
  comedy,
  history,
  horror,
  thriller,
  scienceFiction,
  family,
  romance,
  documentry,
  movieObjects
}: MoviePropsType) => {
  
  useFetchMovies(movieObjects);
  const aaa = useStorage()
console.log("ðŸ’›aaa", aaa);
  return (
    <>
      <Head>
        <title>Netflix</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Banner netflixOriginals={netflixOriginals}/>
      {/* <Movies/> */}
    </>
  );
};

export default Home;

// server-side-rendering : SSR
export const getServerSideProps = async (context:any) => {
  const {req, res} = context;

  let movieObjects = {} as ObjType;
 
  const promiseResponse = await Promise.all(
    allURI.map(async (uri: UriType) => {
      const getMoviesData = await fetch(uri?.movieURL);
      const jsonConvertedData = await getMoviesData.json();
      movieObjects[uri?.movieType] = jsonConvertedData?.results;
    })
  );

  res.setHeader(
    'Cache-Control',
    'public, s-maxage=10, stale-while-revalidate=59'
    )

  return {
    props: {
      netflixOriginals: movieObjects?.netflixOriginals,
      topRated: movieObjects?.topRated,
      trending: movieObjects?.trending,
      adeventure: movieObjects?.adeventure,
      fantasy: movieObjects?.fantasy,
      animation: movieObjects?.animation,
      drama: movieObjects?.drama,
      action: movieObjects?.action,
      comedy: movieObjects?.comedy,
      history: movieObjects?.history,
      horror: movieObjects?.horror,
      thriller: movieObjects?.thriller,
      scienceFiction: movieObjects?.scienceFiction,
      family: movieObjects?.family,
      romance: movieObjects?.romance,
      documentry: movieObjects?.documentry,
      movieObjects: movieObjects
    },
  };
};

/*
  console.log("ðŸ’›ðŸ’›ðŸ’› ", `${process.env.NEXT_PUBLIC_BASE_URL}/discover/tv?api_key=${process.env.NEXT_PUBLIC_API_KEY}&with_networks=213`)

  await Promise.all([
    fetch(uri.netflixOriginal).then((res) => res.json()),
    fetch(uri.topRated).then((res) => res.json()),
    fetch(uri.trending).then((res) => res.json()),
    fetch(uri.adeventure).then((res) => res.json()),
    fetch(uri.fantasy).then((res) => res.json()),
    fetch(uri.animation).then((res) => res.json()),
    fetch(uri.drama).then((res) => res.json()),
    fetch(uri.action).then((res) => res.json()),
    fetch(uri.comedy).then((res) => res.json()),
    fetch(uri.history).then((res) => res.json()),
    fetch(uri.horror).then((res) => res.json()),
    fetch(uri.thriller).then((res) => res.json()),
    fetch(uri.scienceFiction).then((res) => res.json()),
    fetch(uri.family).then((res) => res.json()),
    fetch(uri.romance).then((res) => res.json()),
    fetch(uri.documentry).then((res) => res.json()),
  ]);
  return {
    props: {
      netflixOriginal: netflixOriginal.results,
      topRated: topRated.results,
      trending: trending.results,
      adeventure: adeventure.results,
      fantasy: fantasy.results,
      animation: animation.results,
      drama: drama.results,
      action: action.results,
      comedy: comedy.results,
      history: history.results,
      horror: horror.results,
      thriller: thriller.results,
      scienceFiction: scienceFiction.results,
      family: family.results,
      romance: romance.results,
      documentry: documentry.results,
    },
  };

*/
