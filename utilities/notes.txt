/*

All the codes are kept as a backup in this textFile for further purposes(hints and tricks) to avoid complexity if needed.

*/



// import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { allURI } from "../assets/apiKeys";
import TopHeader from "../components/TopHeader";
import Layout from "../components/Layout";
import styles from "../styles/Home.module.css";
import { Movie, MoviePropsType, ObjType,  UriType } from "../utilities/types";
import Banner from "./banner";
import Movies from "./movies/movies";
import { useFetchMovies } from "../hooks/useFetchMovies";
import useStorage from "../hooks/useMovies";



const Home = ({
  netflixOriginals,
  topRated,
  trending,
  adeventure,
  fantasy,
  animation,
  drama,
  action,
  comedy,
  history,
  horror,
  thriller,
  scienceFiction,
  family,
  romance,
  documentry,
  movieObjects
}: MoviePropsType) => {
  
  useFetchMovies(movieObjects);
  const aaa = useStorage()
console.log("ðŸ’›aaa", aaa);
  return (
    <>
      <Head>
        <title>Netflix</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Banner netflixOriginals={netflixOriginals}/>
      {/* <Movies/> */}
    </>
  );
};

export default Home;

// server-side-rendering : SSR
export const getServerSideProps = async (context:any) => {
  const {req, res} = context;

  let movieObjects = {} as ObjType;
 
  const promiseResponse = await Promise.all(
    allURI.map(async (uri: UriType) => {
      const getMoviesData = await fetch(uri?.movieURL);
      const jsonConvertedData = await getMoviesData.json();
      movieObjects[uri?.movieType] = jsonConvertedData?.results;
    })
  );

  res.setHeader(
    'Cache-Control',
    'public, s-maxage=10, stale-while-revalidate=59'
    )

  return {
    props: {
      netflixOriginals: movieObjects?.netflixOriginals,
      topRated: movieObjects?.topRated,
      trending: movieObjects?.trending,
      adeventure: movieObjects?.adeventure,
      fantasy: movieObjects?.fantasy,
      animation: movieObjects?.animation,
      drama: movieObjects?.drama,
      action: movieObjects?.action,
      comedy: movieObjects?.comedy,
      history: movieObjects?.history,
      horror: movieObjects?.horror,
      thriller: movieObjects?.thriller,
      scienceFiction: movieObjects?.scienceFiction,
      family: movieObjects?.family,
      romance: movieObjects?.romance,
      documentry: movieObjects?.documentry,
      movieObjects: movieObjects
    },
  };
};

/*
  console.log("ðŸ’›ðŸ’›ðŸ’› ", `${process.env.NEXT_PUBLIC_BASE_URL}/discover/tv?api_key=${process.env.NEXT_PUBLIC_API_KEY}&with_networks=213`)

  await Promise.all([
    fetch(uri.netflixOriginal).then((res) => res.json()),
    fetch(uri.topRated).then((res) => res.json()),
    fetch(uri.trending).then((res) => res.json()),
    fetch(uri.adeventure).then((res) => res.json()),
    fetch(uri.fantasy).then((res) => res.json()),
    fetch(uri.animation).then((res) => res.json()),
    fetch(uri.drama).then((res) => res.json()),
    fetch(uri.action).then((res) => res.json()),
    fetch(uri.comedy).then((res) => res.json()),
    fetch(uri.history).then((res) => res.json()),
    fetch(uri.horror).then((res) => res.json()),
    fetch(uri.thriller).then((res) => res.json()),
    fetch(uri.scienceFiction).then((res) => res.json()),
    fetch(uri.family).then((res) => res.json()),
    fetch(uri.romance).then((res) => res.json()),
    fetch(uri.documentry).then((res) => res.json()),
  ]);
  return {
    props: {
      netflixOriginal: netflixOriginal.results,
      topRated: topRated.results,
      trending: trending.results,
      adeventure: adeventure.results,
      fantasy: fantasy.results,
      animation: animation.results,
      drama: drama.results,
      action: action.results,
      comedy: comedy.results,
      history: history.results,
      horror: horror.results,
      thriller: thriller.results,
      scienceFiction: scienceFiction.results,
      family: family.results,
      romance: romance.results,
      documentry: documentry.results,
    },
  };

*/


============>
login:alternative

import React, { Dispatch, SetStateAction, useState } from "react";
import Image from "next/image";
import Link from "next/link";
// import { Value } from "sass";

// interface HTMLProps<T> extends HTMLAttributes, ClassAttributes<T> {
// }
type inputTypes = {
  phn_email?: string | null;
  password?: string | null;
  // formInput: String | any,
  // setFormInput: Dispatch<SetStateAction<object|any>>
};

const Login = () => {
  const [formInput, setFormInput] = useState<inputTypes>({
    phn_email: '',
    password: '',
  });

  const handleInput = (e: React.FormEvent<HTMLInputElement>): void => {
    const { name, value } = e.target as HTMLInputElement;
    setFormInput((prevInput)=> ({ ...prevInput, [name]: value }))
    // setFormInput({...formInput, [name]: value });
  };
  console.log("ðŸ’›formInput", formInput);
  return (
    <div className="loginBanner_main">
      <div className="bannerBlock">
        <Image
          src="/../public/images/netflix-loginBanner.jpg"
          alt="loginBannerImage"
          layout="fill"
          objectFit="cover"
          quality={100}
          loading="lazy"
        />
      </div>

      <div className="authBlock">
        <h1>Sign In</h1>
        <form>
          <input
            type="text"
            placeholder="Email or Phone Number"
            name="phn_email"
            value={formInput.phn_email || ""}
            onChange={handleInput}
          />
          <input
            type="password"
            placeholder="Password"
            name="password"
            value={formInput.password || ""}
            onChange={handleInput}
          />
          <button>Sign In</button>
        </form>

        <div className="formBottomBlock">
          <div className="rememberMe">
            <input type="checkbox" id="remember" name="remember" value="Bike" />
            <label htmlFor="remember"> Remember me.</label>
          </div>

          <div className="forgotPassword">
            <Link href="#">Forgot password?</Link>
          </div>
        </div>

        <div className="signUpBlock">
          <h3>New to Netflix?</h3>
          <Link href="#">Sign up</Link>
        </div>
      </div>
    </div>
  );
};

export default Login;

========

const styles: { [key: string]: React.CSSProperties } = {
  checkbox: {
    margin: "10px 0",
    padding: "14px 25px",
    backgroundColor: "rgb(238 237 247)",
    width: "100%",
    display: "flex",
    justifyContent: "space-between",
  },
  button: {
    marginTop: 15,
    color: "#ffffff",
    width: "100%",
    cursor: "pointer",
    padding: "15px 30px",
    border: "none",
    fontWeight: "bold",
    backgroundColor: "red",
  },
}