import Head from "next/head";
import Image from "next/image";
import { allURI } from "../assets/apiKeys";
import TopHeader from "../components/TopHeader";
import Layout from "../components/Layout";
import styles from "../styles/Home.module.css";
import { Movie, MoviePropsType, ObjType, UriType } from "../utilities/types";
import Banner from "../components/banner";
import { useFetchMovies } from "../hooks/useFetchMovies";
import useStorage from "../hooks/useStorage";
import Movies from "../components/movies";
import Modal from "../components/sharedComponent/Modal";
import { useEffect, useState } from "react";
import { BsHandIndexFill } from "react-icons/bs";
import ToolTips from "../components/sharedComponent/ToolTips";

const Home = ({ netflixOriginals, movieObjects }: MoviePropsType) => {
  const { setMovieObjects, isOpen, setIsOpen } = useStorage();
  setMovieObjects(movieObjects);
  console.log("ðŸ’› movieObjects:", movieObjects)

  const handleClose = (value:boolean, ...extra:any):void => {
    setIsOpen(value)
  }

  useEffect(()=> {
    if(isOpen === true){
      document.getElementsByTagName("body")[0]?.classList.add("disabled_body_scroll");
    }else{
      document.getElementsByTagName("body")[0]?.classList.remove("disabled_body_scroll");
    }

    return () =>  document.getElementsByTagName("body")[0]?.classList.remove("disabled_body_scroll");

  // if(isOpen === true){
  //   document.body.classList.toggle("disabled_body_scroll", isOpen)
  // }
  }, [isOpen])

  return (
    <div className="home_mainContainer" id="globalIndicator">
      <Head>
        <title>Netflix</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Banner netflixOriginals={netflixOriginals} />
      <Movies />
      {isOpen && <Modal open={isOpen} handleClose={handleClose}/>}
    </div>
  );
};

export default Home;

// server-side-rendering : SSR
export const getServerSideProps = async (context: any) => {
  const { req, res } = context;

  let movieObjects = {} as ObjType;

  const promiseResponse = await Promise.all(
    allURI.map(async (uri: UriType, index:any) => {
      const getMoviesData = await fetch(uri?.movieURL);
      const jsonConvertedData = await getMoviesData.json();
      movieObjects[uri?.movieType] = jsonConvertedData?.results;
    })
  );

  return {
    props: {
      netflixOriginals: movieObjects?.netflixOriginals,
      movieObjects: movieObjects,
    },
  };
};



//::: code commented for further use:::

  // res.setHeader(
  //   "Cache-Control",
  //   "public, s-maxage=10, stale-while-revalidate=59"
  // );
